<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vite Logo</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0d1117;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">
    <div id="image-container" class="bg-gray-800 p-8 rounded-xl shadow-2xl border border-gray-700 flex flex-col items-center justify-center space-y-6 max-w-lg w-full">
        <h1 class="text-3xl font-bold text-white text-center">Vite Logo</h1>
        <div id="loading-indicator" class="flex flex-col items-center justify-center text-white">
            <svg class="animate-spin h-10 w-10 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p class="mt-4 text-gray-400">Generating image...</p>
        </div>
        <img id="generated-image" src="" alt="Generated Vite logo" class="hidden w-full h-auto rounded-lg" />
    </div>

    <script>
        const loadingIndicator = document.getElementById('loading-indicator');
        const generatedImage = document.getElementById('generated-image');

        async function generateImage() {
            try {
                // Prepare the payload for image generation
                const userPrompt = "A high-quality, professional image of the Vite logo. The logo consists of a red-orange and blue triangle forming a 'V' shape, with the word 'Vite' written in a sans-serif font next to it. The background should be a clean, dark gray.";
                const payload = {
                    instances: { prompt: userPrompt },
                    parameters: { "sampleCount": 1 }
                };

                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                
                if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {
                    const imageUrl = `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;
                    generatedImage.src = imageUrl;
                    generatedImage.classList.remove('hidden');
                    loadingIndicator.classList.add('hidden');
                } else {
                    console.error("Image generation failed:", result);
                    loadingIndicator.innerHTML = '<p class="text-red-400">Failed to generate image. Please try again.</p>';
                }
            } catch (error) {
                console.error("Error generating image:", error);
                loadingIndicator.innerHTML = '<p class="text-red-400">An error occurred. Please check the console for details.</p>';
            }
        }

        window.onload = generateImage;
    </script>
</body>
</html>

